# syntax = docker/dockerfile:1
# This Dockerfile uses multi-stage build to customize DEV and PROD images:
# https://docs.docker.com/develop/develop-images/multistage-build/

ARG VENV_TAG=3.12-latest
FROM ghcr.io/rackerlabs/genestack-images/openstack-venv:${VENV_TAG} AS dependency_build
ARG CACHEBUST=0
ARG OS_VERSION=master
ARG OS_CONSTRAINTS=master
RUN export DEBIAN_FRONTEND=noninteractive \
  && apt-get update && apt-get upgrade -y \
  && apt-get install --no-install-recommends -y \
                                             apt-transport-https \
                                             ca-certificates \
                                             bash \
                                             brotli \
                                             build-essential \
                                             cmake \
                                             curl \
                                             docutils-common \
                                             gettext \
                                             gir1.2-glib-2.0 \
                                             git \
                                             libcairo2-dev \
                                             libffi-dev \
                                             libgirepository1.0-dev \
                                             libjs-sphinxdoc \
                                             libjs-underscore \
                                             libldap2-dev \
                                             libpq-dev \
                                             libsasl2-dev \
                                             libssl-dev \
                                             libsystemd-dev \
                                             libxml2-dev \
                                             libxslt1-dev \
                                             pkg-config \
                                             ssl-cert \
                                             xmlsec1
RUN /var/lib/openstack/bin/pip install --constraint https://opendev.org/openstack/requirements/raw/branch/${OS_CONSTRAINTS}/upper-constraints.txt \
                                       git+https://opendev.org/openstack/cinder.git@${OS_VERSION}#egg=cinder \
                                       cryptography \
                                       ecdsa \
                                       PyMySQL \
                                       python-memcached \
                                       os-brick \
                                       uwsgi

COPY scripts/cinder-cve-patching.sh /opt/
RUN bash /opt/cinder-cve-patching.sh

RUN find / -name '*.pyc' -delete \
  && find / -name '*.pyo' -delete \
  && find / -name '__pycache__' -delete \
  && find / -name '*.whl' -delete \
  && rm -f /var/lib/openstack/lib/python*/site-packages/slapdtest/certs/client.key \
  && rm -f /var/lib/openstack/lib/python*/site-packages/slapdtest/certs/server.key \
  && sed -i '/^Usage/,/^Documentation\n^-.*$/d' /var/lib/openstack/lib/python*/site-packages/PyJWT-*.dist-info/METADATA


FROM python:3.12-slim-bookworm
LABEL maintainer="Rackspace"
LABEL vendor="Rackspace OpenStack Team"
LABEL org.opencontainers.image.name="cinder"
LABEL org.opencontainers.image.description="OpenStack Service (cinder) built for the enterprise."
COPY --from=dependency_build /var/lib/openstack /var/lib/openstack
RUN export DEBIAN_FRONTEND=noninteractive \
           CEPH_KEY=http://download.ceph.com/keys/release.asc \
           CEPH_REPO="deb https://download.ceph.com/debian-squid bookworm main" \
  && apt-get update && apt-get upgrade -y \
  && apt-get install --no-install-recommends -y \
                                                apt-transport-https \
                                                ca-certificates \
                                                gnupg2 \
                                                curl \
                                                libxml2 \
                                                multipath-tools \
                                                open-iscsi \
                                                qemu-block-extra \
                                                qemu-utils \
                                                systemctl \
                                                lsscsi \
                                                nvme-cli \
  && curl -o /etc/apt/trusted.gpg.d/ceph.asc ${CEPH_KEY} \
  && echo "${CEPH_REPO}" >/etc/apt/sources.list.d/ceph.list \
  && cat /etc/apt/sources.list.d/ceph.list \
  && apt-get update && apt-get install --no-install-recommends -y \
                                                ceph-common \
                                                python3-ceph \
                                                python3-ceph-common \
                                                python3-cephfs \
                                                python3-rados \
                                                python3-rbd \
  && cd `/var/lib/openstack/bin/python -c 'import site;print(site.getsitepackages()[0])'` && ln -sf `/usr/bin/python3 -c 'import rados; print(rados.__file__)'` \
  && cd `/var/lib/openstack/bin/python -c 'import site;print(site.getsitepackages()[0])'` && ln -sf `/usr/bin/python3 -c 'import rbd; print(rbd.__file__)'` \
  && cd `/var/lib/openstack/bin/python -c 'import site;print(site.getsitepackages()[0])'` && ln -sf `/usr/bin/python3 -c 'import cephfs; print(cephfs.__file__)'` \
  && cd `/var/lib/openstack/bin/python -c 'import site;print(site.getsitepackages()[0])'` && ln -sf `/usr/bin/python3 -c 'import ceph_argparse; print(ceph_argparse.__file__)'` \
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && apt-get clean -y \
  && rm -rf /var/lib/apt/lists/* \
  && find / -name '*.pyc' -delete \
  && find / -name '*.pyo' -delete \
  && find / -name '__pycache__' -delete \
  && groupadd --system --gid 42424 cinder \
  && useradd --system --gid 42424 --uid 42424 --shell /sbin/nologin --create-home --home /var/lib/cinder cinder \
  && mkdir -p /var/lib/openstack/etc/cinder \
  && ln -s /var/lib/openstack/etc/cinder /etc/cinder \
  && chown cinder:cinder -h /etc/cinder \
  && chown -R cinder:cinder /var/lib/openstack/etc/cinder
# Set the environment variables for the cinder venv
ENV PATH="/var/lib/openstack/bin:$PATH"
# Set the working directory
WORKDIR /var/lib/openstack
# Set the user and group to match the original build
USER 42424:42424
# Set the entrypoint to the cinder-manage command
ENTRYPOINT ["/var/lib/openstack/bin/cinder-manage"]
